/*!
* Counter Up 2 - Lastest Updated
*
* Copyright 2013, Benjamin Intal http://gambit.ph @bfintal
* Released under the GPL v2 License
*/

const counterUp = (element, options = {}) => {
    const {
        action = "start",
        duration = 1000,
        delay = 16,
        lang = document.querySelector("html").getAttribute("lang") || undefined
    } = options;

    // Stop counter if action is "stop"
    if (action === "stop") {
        stopCountUp(element);
        return;
    }

    // Stop any existing count up animation on the element
    stopCountUp(element);

    // Only proceed if the element's content includes a number
    if (!/[0-9]/.test(element.innerHTML)) return;

    // Divide the element's inner HTML into frames for the animation
    const frames = divideNumbers(element.innerHTML, {
        duration: duration || element.getAttribute("data-duration"),
        lang: lang,
        delay: delay || element.getAttribute("data-delay")
    });

    // Save the original content and set the initial frame
    element._countUpOrigInnerHTML = element.innerHTML;
    element.innerHTML = frames[0];
    element.style.visibility = "visible";

    // Recursive function to update the content frame by frame
    const updateFrame = () => {
        element.innerHTML = frames.shift();

        if (frames.length) {
            clearTimeout(element.countUpTimeout);
            element.countUpTimeout = setTimeout(updateFrame, delay);
        } else {
            element._countUpOrigInnerHTML = undefined;
        }
    };

    element.countUpTimeout = setTimeout(updateFrame, delay);
};

// Function to stop the counter animation and reset the content
const stopCountUp = (element) => {
    clearTimeout(element.countUpTimeout);

    if (element._countUpOrigInnerHTML) {
        element.innerHTML = element._countUpOrigInnerHTML;
        element._countUpOrigInnerHTML = undefined;
    }
    element.style.visibility = "";
};

// Function to divide the original number into frames for the animation
const divideNumbers = (content, options = {}) => {
    const {
        duration = 1000,
        delay = 16,
        lang
    } = options;

    const frameCount = Math.floor(duration / delay);
    const contentParts = content.toString().split(/(<[^>]+>|[0-9.][,.0-9]*[0-9]*)/);
    const frames = Array(frameCount).fill("");

    for (let i = 0; i < contentParts.length; i++) {
        if (/([0-9.][,.0-9]*[0-9]*)/.test(contentParts[i]) && !/<[^>]+>/.test(contentParts[i])) {
            let number = contentParts[i].replace(/,/g, "");
            const hasComma = /[0-9]+,[0-9]+/.test(contentParts[i]);
            const isDecimal = /^[0-9]+\.[0-9]+$/.test(number);
            const decimalPlaces = isDecimal ? (number.split(".")[1] || []).length : 0;

            for (let j = frameCount; j >= 1; j--) {
                let currentValue = parseInt((number / frameCount) * j, 10);
                
                if (isDecimal) {
                    currentValue = parseFloat((number / frameCount) * j).toFixed(decimalPlaces);
                    currentValue = parseFloat(currentValue).toLocaleString(lang);
                }
                
                if (hasComma) {
                    currentValue = currentValue.toLocaleString(lang);
                }

                frames[frameCount - j] += currentValue;
            }
        } else {
            for (let j = 0; j < frameCount; j++) {
                frames[j] += contentParts[i];
            }
        }
    }

    frames[frameCount] = content.toString();
    return frames;
};
